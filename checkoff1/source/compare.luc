global Func{
  const EQ   = 2b01;
  const LT   = 2b10;
  const LTEQ = 2b11;
}

module compare (  
    // 3 functions: CMPEQ (EQUAL), CMPLT (LESS THAN), CMPLE (LESS THAN, EQUAL TO)
    input alufn[6], // to use only ALUFN1 and ALUFN2 to decide which compare function to use
    // z , v, and n are from the results of adder!
    input z,  
    input v,
    input n,  
    output cmp_[16] // output from this module
   ){
  sig cmp;
    always {
    // LSB of output is determined by the comparison being performed and the results of the subtraction carried out by the adder/subtractor. 
    // The high order 15 bits of our output are 0.

        case (alufn[2:1]) {    // values of ALUFN that define comparator function
        Func.EQ:        // where the digit in the 10's place is ALUFN2 and the digit in the 1's place is ALUFN1
          cmp = z;  // CMPEQ i.e. if A == B

        Func.LT:
          cmp = n ^ v;  // CMPLT i.e. if A < B

        Func.LTEQ:
          cmp = z | (n ^ v);  // CMPLE i.e. if A <= B
            
        default:
          cmp = b0;
        }
          cmp_[15:1]= 15b0;   // high order 15 bits are 0
          cmp_[0] = cmp;     // LSB
    }
   
}