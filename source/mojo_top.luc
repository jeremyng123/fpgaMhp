module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
    

  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
//    edge_detector edge_detector (#RISE(1), #FALL(0)); // added edge detector 
    
    .rst(rst){
      myFsm myFSM; // instance of FSM
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    //input initialized
    myFSM.up = io_button[0];      // initialise Up button
    myFSM.left = io_button[3];    // initialise Left button
    myFSM.down =io_button[2];     // initialise Down button
    myFSM.sum = sum;              // returns 1 when Sum LED is on
    myFSM.cout = cout;            // returns 1 when Cout LED is on
    myFSM.aM = io_dip[0][0];      // initialise rightmost dip switch to A switch when manual mode is on
    myFSM.bM = io_dip[0][1];      // initialise 2nd rightmost dip switch to B switch when manual mode is on
    myFSM.cinM = io_dip[0][2];    // initialise 3rd rightmost dip switch to Cin switch when manual mode is on
    a = 0;
    b = 0;
    cin = 0;
    
    // assign led with fsm
    cin = myFSM.cin;
    b = myFSM.b;
    a = myFSM.a;
    // initialize a,b,cin to be connected to FSM a,b,cin
    io_led[2] = 8x{myFSM.a};    // LEDs on IO Shield to be lit up when switch A is on
    io_led[1] = 8x{myFSM.b};    // LEDs on IO Shield to be lit up when switch B is on
    io_led[0] = 8x{myFSM.cin};  // LEDs on IO Shield to be lit up when switch Cin is on
  }
}