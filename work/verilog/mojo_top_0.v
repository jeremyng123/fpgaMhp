/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg cin,
    input sum,
    input cout
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_myFSM_a;
  wire [1-1:0] M_myFSM_b;
  wire [1-1:0] M_myFSM_cin;
  wire [1-1:0] M_myFSM_error;
  reg [1-1:0] M_myFSM_up;
  reg [1-1:0] M_myFSM_down;
  reg [1-1:0] M_myFSM_left;
  reg [1-1:0] M_myFSM_aM;
  reg [1-1:0] M_myFSM_bM;
  reg [1-1:0] M_myFSM_cinM;
  reg [1-1:0] M_myFSM_sum;
  reg [1-1:0] M_myFSM_cout;
  myFsm_2 myFSM (
    .clk(clk),
    .rst(rst),
    .up(M_myFSM_up),
    .down(M_myFSM_down),
    .left(M_myFSM_left),
    .aM(M_myFSM_aM),
    .bM(M_myFSM_bM),
    .cinM(M_myFSM_cinM),
    .sum(M_myFSM_sum),
    .cout(M_myFSM_cout),
    .a(M_myFSM_a),
    .b(M_myFSM_b),
    .cin(M_myFSM_cin),
    .error(M_myFSM_error)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_myFSM_up = io_button[0+0-:1];
    M_myFSM_left = io_button[3+0-:1];
    M_myFSM_down = io_button[2+0-:1];
    M_myFSM_sum = sum;
    M_myFSM_cout = cout;
    M_myFSM_aM = io_dip[0+0+0-:1];
    M_myFSM_bM = io_dip[0+1+0-:1];
    M_myFSM_cinM = io_dip[0+2+0-:1];
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    cin = M_myFSM_cin;
    b = M_myFSM_b;
    a = M_myFSM_a;
    io_led[16+7-:8] = {4'h8{M_myFSM_a}};
    io_led[8+7-:8] = {4'h8{M_myFSM_b}};
    io_led[0+7-:8] = {4'h8{M_myFSM_cin}};
  end
endmodule
