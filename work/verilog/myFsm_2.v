/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module myFsm_2 (
    input clk,
    input rst,
    input up,
    input down,
    input left,
    output reg a,
    input aM,
    output reg b,
    input bM,
    output reg cin,
    input cinM,
    input sum,
    input cout,
    output reg error
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_3 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam MANUAL_state = 4'd0;
  localparam AUTO_state = 4'd1;
  localparam TEST_state = 4'd2;
  localparam A_state = 4'd3;
  localparam B_state = 4'd4;
  localparam AB_state = 4'd5;
  localparam CIN_state = 4'd6;
  localparam AC_state = 4'd7;
  localparam BC_state = 4'd8;
  localparam ABC_state = 4'd9;
  localparam FAILED_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = MANUAL_state;
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    error = 1'h0;
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    M_counter_d = M_counter_q + 1'h1;
    M_edge_detector_in = M_counter_q[27+0-:1];
    
    case (M_state_q)
      MANUAL_state: begin
        M_counter_d = 1'h0;
        a = aM;
        b = bM;
        cin = cinM;
        if (left) begin
          M_state_d = AUTO_state;
        end else begin
          M_state_d = MANUAL_state;
        end
      end
      AUTO_state: begin
        a = M_counter_q[23+0-:1];
        b = M_counter_q[23+0-:1];
        cin = M_counter_q[23+0-:1];
        if (up) begin
          M_state_d = MANUAL_state;
        end else begin
          if (down) begin
            M_counter_d = 1'h0;
            M_state_d = TEST_state;
          end else begin
            M_state_d = AUTO_state;
          end
        end
      end
      FAILED_state: begin
        error = 1'h1;
        if (left) begin
          M_state_d = TEST_state;
        end else begin
          if (up) begin
            M_state_d = MANUAL_state;
          end else begin
            M_state_d = FAILED_state;
          end
        end
      end
      TEST_state: begin
        if (M_edge_detector_out) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 && cout == 1'h0) begin
            a = 1'h1;
            b = 1'h0;
            cin = 1'h0;
            M_state_d = A_state;
          end else begin
            M_state_d = FAILED_state;
          end
        end else begin
          M_state_d = TEST_state;
        end
      end
      A_state: begin
        if (M_edge_detector_out) begin
          if (sum == 1'h0) begin
            M_state_d = FAILED_state;
          end else begin
            M_counter_d = 1'h0;
            a = 1'h0;
            b = 1'h1;
            cin = 1'h0;
            M_state_d = B_state;
          end
        end else begin
          M_state_d = A_state;
        end
      end
      B_state: begin
        if (M_edge_detector_out) begin
          if (sum == 1'h0) begin
            M_state_d = FAILED_state;
          end else begin
            M_counter_d = 1'h0;
            a = 1'h1;
            b = 1'h1;
            cin = 1'h0;
            M_state_d = AB_state;
          end
        end else begin
          M_state_d = B_state;
        end
      end
      AB_state: begin
        if (M_edge_detector_out) begin
          if (cout == 1'h0) begin
            M_state_d = FAILED_state;
          end else begin
            M_counter_d = 1'h0;
            a = 1'h0;
            b = 1'h0;
            cin = 1'h1;
            M_state_d = CIN_state;
          end
        end else begin
          M_state_d = AB_state;
        end
      end
      CIN_state: begin
        if (M_edge_detector_out) begin
          if (sum == 1'h0) begin
            M_state_d = FAILED_state;
          end else begin
            M_counter_d = 1'h0;
            a = 1'h1;
            b = 1'h0;
            cin = 1'h1;
            M_state_d = AC_state;
          end
        end else begin
          M_state_d = CIN_state;
        end
      end
      AC_state: begin
        if (M_edge_detector_out) begin
          if (cout == 1'h0) begin
            M_state_d = FAILED_state;
          end else begin
            M_counter_d = 1'h0;
            a = 1'h0;
            b = 1'h1;
            cin = 1'h1;
            M_state_d = BC_state;
          end
        end else begin
          M_state_d = AC_state;
        end
      end
      BC_state: begin
        if (M_edge_detector_out) begin
          if (cout == 1'h0) begin
            M_state_d = FAILED_state;
          end else begin
            M_counter_d = 1'h0;
            a = 1'h1;
            b = 1'h1;
            cin = 1'h1;
            M_state_d = ABC_state;
          end
        end else begin
          M_state_d = BC_state;
        end
      end
      ABC_state: begin
        if (M_edge_detector_out) begin
          M_counter_d = 1'h0;
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          M_state_d = AUTO_state;
        end else begin
          M_state_d = ABC_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
